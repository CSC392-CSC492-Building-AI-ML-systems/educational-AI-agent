# -*- coding: utf-8 -*-
"""CSC392-MODEL-2-TRAINING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gs7iL0bXsfWKdnKbtPouo7mpzAXaCBqN

**INSTALLING REQUIRED LIBRARIES**
"""

!pip3 install -q -U bitsandbytes
!pip3 install -q -U peft
!pip3 install -q -U trl
!pip3 install -q -U accelerate
!pip3 install -q -U datasets
!pip3 install -q -U transformers

"""**USE BNB_CONFIG TO REDUCE THE AMOUNT OF MEMORY USED**"""

import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

"""**LOAD MODEL FROM HUGGINGFACE**"""

model_id = "google/gemma-2-2b"

model = AutoModelForCausalLM.from_pretrained(model_id, quantization_config=bnb_config, device_map={"":0})
tokenizer = AutoTokenizer.from_pretrained(model_id, add_eos_token=True)

"""**ADD TRAINING DATA**"""

!unzip training_data.zip

import os
import json
import pandas as pd

# Initialize the dictionary to store data
data = {
    "input": [],
    "output": []
}

# Iterate over each subdirectory and its files in the '/content' directory
for subdir, _, files in os.walk('/content'):
    json_content = None
    markdown_content = None

    # Look for .json and .md files in the current subdirectory
    for file in files:
        file_path = os.path.join(subdir, file)

        if file.endswith('.json') and os.path.isfile(file_path):
            with open(file_path, 'r') as f:
                json_content = json.load(f)
                # Check if json_content is a dictionary and extract the "annotation" key
                if isinstance(json_content, dict):
                    json_content = json_content.get("annotation")
                else:
                    json_content = None  # Handle case where JSON is not a dictionary

        elif file.endswith('.md') and os.path.isfile(file_path):
            with open(file_path, 'r') as f:
                markdown_content = f.read()

    # Append contents to the respective lists if both files are found
    if json_content and markdown_content:
        data["input"].append(json_content)
        data["output"].append(markdown_content)

# Create DataFrame
df = pd.DataFrame(data)

# Display the DataFrame to verify structure
print(df)

"""**GENERATE PROMPTS FOR EACH DATA POINT**"""

from datasets import Dataset
from transformers import AutoTokenizer

# Initialize the tokenizer
tokenizer = AutoTokenizer.from_pretrained("google/gemma-2-2b")  # Replace with your model

# Function to generate the prompt
def generate_prompt(data_point):
    return f"""
        <start_of_turn>user
        Based on the following annotated Asciinema recording:
        {data_point["input"]}
        Generate a single cohesive Markdown file that explains and summarizes the entire process from the Asciinema recording.
        The summary should focus on:
        * Describing the context of each action.
        * Clearly explaining why the action was used, what the action does, and the outcome of this action.
        * Focus on making the documentation informative enough to be easily followed, capturing the step-by-step workflow as demonstrated in the recording, without using generic phrases.

        In the Markdown file, I want the following:
        * The main title should be preceded with a # and section titles should be preceded with ##.
        * End the markdown file with a 'Key Takeaways' section that summarizes the main points of the recording.
        <end_of_turn>\n
        <start_of_turn>model
        {data_point["output"]}<end_of_turn>
    """

# Convert the pandas DataFrame to a Hugging Face Dataset
dataset = Dataset.from_pandas(df)

# add the "prompt" column in the dataset
text_column = [generate_prompt(data_point) for data_point in dataset]
dataset = dataset.add_column("prompt", text_column)

dataset = dataset.shuffle(seed=1234)  # Shuffle dataset here
dataset = dataset.map(lambda samples: tokenizer(samples["prompt"]), batched=True)

dataset = dataset.train_test_split(test_size=0.2)
print(dataset)

train_data = dataset["train"]
test_data = dataset["test"]

"""**APPLY LORA STUFF (MAKES FINE TUNING LESS EXPENSIVE)**"""

from peft import LoraConfig, PeftModel, prepare_model_for_kbit_training, get_peft_model
model.gradient_checkpointing_enable()
model = prepare_model_for_kbit_training(model)

import bitsandbytes as bnb
def find_all_linear_names(model):
  cls = bnb.nn.Linear4bit #if args.bits == 4 else (bnb.nn.Linear8bitLt if args.bits == 8 else torch.nn.Linear)
  lora_module_names = set()
  for name, module in model.named_modules():
    if isinstance(module, cls):
      names = name.split('.')
      lora_module_names.add(names[0] if len(names) == 1 else names[-1])
    if 'lm_head' in lora_module_names: # needed for 16-bit
      lora_module_names.remove('lm_head')
  return list(lora_module_names)

modules = find_all_linear_names(model)
print(modules)

from peft import LoraConfig, get_peft_model

lora_config = LoraConfig(
    r=64,
    lora_alpha=32,
    target_modules=modules,
    lora_dropout=0.05,
    bias="none",
    task_type="CAUSAL_LM"
)

model = get_peft_model(model, lora_config)

trainable, total = model.get_nb_trainable_parameters()
print(f"Trainable: {trainable} | total: {total} | Percentage: {trainable/total*100:.4f}%")

"""**TRAIN THE MODEL**"""

import transformers

from trl import SFTTrainer


tokenizer.pad_token = tokenizer.eos_token
torch.cuda.empty_cache()


trainer = SFTTrainer(
    model=model,
    train_dataset=train_data,
    eval_dataset=test_data,
    dataset_text_field="prompt",
    peft_config=lora_config,
    args=transformers.TrainingArguments(
        per_device_train_batch_size=1,
        gradient_accumulation_steps=4,
        #warmup_steps=0.03,
        max_steps=100,
        learning_rate=2e-4,
        logging_steps=1,
        output_dir="outputs",
        optim="paged_adamw_8bit",
        save_strategy="epoch",
    ),
    data_collator=transformers.DataCollatorForLanguageModeling(tokenizer, mlm=False),
)

model.config.use_cache = False
trainer.train()

"""**SAVE MODEL LOCALLY**"""

new_model = "csc392-model-2-final"

trainer.model.save_pretrained(new_model)

base_model = AutoModelForCausalLM.from_pretrained(
    model_id,
    low_cpu_mem_usage=True,
    return_dict=True,
    torch_dtype=torch.float16,
    device_map={"": 0},
)

merged_model= PeftModel.from_pretrained(base_model, new_model)
merged_model= merged_model.merge_and_unload()

# Save the merged model
merged_model.save_pretrained("merged_model",safe_serialization=True)
tokenizer.save_pretrained("merged_model")
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

"""**SAVE MODEL TO HUGGINGFACE**"""

# Push the model and tokenizer to the Hugging Face Model Hub
merged_model.push_to_hub(new_model, use_temp_dir=False)
tokenizer.push_to_hub(new_model, use_temp_dir=False)